### main.py ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞

import json
import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes,
    filters, ConversationHandler
)
from eth_helpers import is_valid_eth_address, get_token_balance
import logging

logging.basicConfig(level=logging.INFO)

TOKEN = "8163047082:AAHXyQwv_oXIC8JcqPGlEH9ywtUJuVSQmcY"
USERS_FILE = "users.json"
BUY_URL = "https://abm-site-bot.vercel.app"

SET_ADDRESS = 0

def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=2)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìç –°–µ—Ç—å"), KeyboardButton("üíº –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üõí –ö—É–ø–∏—Ç—å ABM"), KeyboardButton("üí∏ –ü—Ä–æ–¥–∞—Ç—å ABM")],
        [KeyboardButton("‚ÑπÔ∏è –û —Ç–æ–∫–µ–Ω–µ")]
    ], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_users()
    if user_id not in users:
        users[user_id] = {
            "username": update.effective_user.username or "",
            "address": None,
            "network": None
        }
        save_users(users)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä ABM! üîµ\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("Sepolia", callback_data="network_sepolia"),
             InlineKeyboardButton("Ethereum Mainnet", callback_data="network_mainnet")]
        ])
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    users = load_users()

    if query.data.startswith("network_"):
        network = query.data.replace("network_", "")
        users[user_id]["network"] = network
        save_users(users)
        await query.edit_message_text(f"‚úÖ –°–µ—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {network.title()}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π Ethereum –∞–¥—Ä–µ—Å.")
        return

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = str(update.effective_user.id)
    users = load_users()

    if user_id not in users or not users[user_id].get("network"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å: /start")
        return

    if is_valid_eth_address(text):
        users[user_id]["address"] = text
        save_users(users)
        await update.message.reply_text("‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu())
        return

    if text == "üìç –°–µ—Ç—å":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("Sepolia", callback_data="network_sepolia"),
                 InlineKeyboardButton("Ethereum Mainnet", callback_data="network_mainnet")]
            ])
        )

    elif text == "üíº –ë–∞–ª–∞–Ω—Å":
        user = users.get(user_id, {})
        network = user.get("network")
        address = user.get("address")
        if not address:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à Ethereum –∞–¥—Ä–µ—Å.")
            return
        if network == "mainnet":
            await update.message.reply_text(
                "‚ÑπÔ∏è –¢–æ–∫–µ–Ω ABM –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ —Å–µ—Ç–∏ Ethereum Mainnet.\n–û–Ω –Ω–µ –∏–º–µ–µ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        else:
            try:
                balance, symbol = get_token_balance(address, network)
                await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.4f} {symbol}")
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    elif text == "üõí –ö—É–ø–∏—Ç—å ABM":
        await update.message.reply_text("–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ ABM:",
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å ABM", web_app=WebAppInfo(url=BUY_URL))]
                                        ]))

    elif text == "üí∏ –ü—Ä–æ–¥–∞—Ç—å ABM":
        await update.message.reply_text("–ü—Ä–æ–¥–∞–∂–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. üíº\n–¢–æ–∫–µ–Ω ABM —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ Ethereum Mainnet –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.")

    elif text == "‚ÑπÔ∏è –û —Ç–æ–∫–µ–Ω–µ":
        info = (
            "üí† *ABM (Alpha Blockchain Money)*\n"
            "–í–µ—Ä—Å–∏—è: 1\n"
            "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: 1,000,000,000 ABM\n"
            "GitHub: [AlphaBlockhainMoney](https://github.com/AlphaBlockhainMoney)\n"
            "Telegram –∫–∞–Ω–∞–ª: [@Abmcoin_RUS](https://t.me/Abmcoin_RUS)\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞: @ThermoFisherScientifis\n\n"
            "üåê ABM ‚Äî —ç—Ç–æ —Ç–æ–∫–µ–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π —Å–≤–æ–±–æ–¥—É, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å."
        )
        await update.message.reply_text(info, parse_mode="Markdown", disable_web_page_preview=True)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
